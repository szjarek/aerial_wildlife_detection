; Sample project configuration file, containing the most important parameters.
; You may use the contents of this file as a template for your own configuration files.
; A list of possible parameters, explanations and default values can be found here:
; https://github.com/microsoft/aerial_wildlife_detection/blob/master/doc/configure_settings.md
;
; In order to run AIde with your configuration file, you need to set the
; AIDE_CONFIG_PATH environment variable to the path in which your file lies on the 
; machine you want to start an AIde service from.
; See here for more details:
; https://github.com/microsoft/aerial_wildlife_detection/blob/master/doc/launch_aide.md
;
;
; 2019 Benjamin Kellenberger


[Project]

projectName = Objectivity AIde Test
projectDescription = Test/demo instance of Aerial Wildlife Detection AIde solution

; File path pointing to a (pseudo-) HTML file containing a welcome message. This message is embedded into the user interface tutorial,
; which the user sees when they first log in to the interface, or else whenever they click the "Help" button.
welcome_message_file = config/welcome_message.html

; File path for a JSON file defining the image backdrops to be shown on the index and create account pages.
; See the "config/backdrops.json" file for a complete example.
backdrops_file = config/backdrops.json

; Allow data points (or images, for the classification case) not to have a label at all (e.g. for "background" samples)
enableEmptyClass = yes

; Type of annotations the user can provide in the UI. One of {'labels', 'points', 'boundingBoxes'}.
annotationType = labels

; Type of annotations the model predicts. Note that this may be different from the "annotationType" property. For example, a setup could have users provide classification labels, but a model predicting points. In this case, "annotationType" would be "classLabels", "predictionType" would be set to "points". Note that this would require translating to usable ground truth in the AI model.
predictionType = boundingBoxes

; For bounding boxes: minimum size (width and height) of a box to be considered valid.
; Invalid boxes (i.e., those drawn too small by users) will automatically be inflated to be of
; the given size.
; Note that boxes with zero width and/or height will always be discarded.
box_minWidth = 20
box_minHeight = 20


; Demo mode: set to 'yes' to enable. In this mode, no authentication is required, no annotations are being saved
; and the "Previous" and "Logout" buttons are disabled / hidden.
demoMode = no


; Admin user for the project that is automatically added during project creation
adminName = admin
adminEmail = admin@anonymous.com
adminPassword = admin


[UserHandler]
; Maximum login time in seconds
time_login = 600

; Secret token required to be allowed to create account.
; Set empty if no restriction required.
create_account_token = PHVKp6aHyMXBEuNJUffjFqS5


; General server settings
[Server]
host = 0.0.0.0
port = 8080

; URL snippet under which the index page can be found. By default this can be left as "/", but may
; be changed if AIde is e.g. deployed under a sub-URL, such as "http://www.mydomain.com/aide", in which
; case it would have to be changed to "/aide".
index_uri = /

; URL under which the (potentially dedicated) file server can be reached that stores the image data
; Note that this may include the port and static URI of the file server instance.
; For the first, it must correspond to the 'port' entry of this section of the file server's configuration
; file. For the second, it must be identical to the 'staticfiles_uri' entry in section 'FileServer'
; of the file server's configuration file.
; Only set to localhost, 127.0.01, etc. if *all* of AIde's services are to be run on the same machine.
; Otherwise, if e.g. a dedicated AIController instance is to be run, it will look for a FileServer instance
; on itself, which will throw an error.
dataServer_uri = /files

; Similar principle for the AIController (host name and port). Leave empty or remove if no AI backend
; is needed (i.e., only the labeling interface is required).
; Also here: only set to loopback (localhost, etc.) if all AIde services are run on just a single machine.
aiController_uri = /


; Properties of the different tiers
[LabelUI]

; Properties of the user interface
minImageWidth = 400
numImageColumns_max = 1

; Whether to display model predictions to the user or not
showPredictions = yes
; Minimum confidence for predictions to be displayed
showPredictions_minConf = 0.5

; Carry over the predictions as annotations automatically. If set to yes, every prediction made by the
; model will automatically count as an annotation added (resp. verified) by the user, unless they delete it.
; Notes:
; - If annotationType = labels, the annotation label will be chosen as per the carryOverRule below
; - If predictionType = boundingBoxes and annotationType = points, bounding boxes will be converted to points
; - If predictionType = points and annotationType = boundingBoxes, points will be converted to bounding boxes
;   with default width and height as specified below
; - If carryOverPredictions = no, predictions might be shown (see above), but are immutable
carryOverPredictions = yes
; Minimum confidence for predictions to be considered for carryover
carryOverPredictions_minConf = 0.99

; Rule for prediction carry-over if annotationType = labels and predictionType is vectorial. Modes:
; - maxConfidence: the class of the prediction with the highest confidence will be chosen
; - mode: the most frequently predicted class will be chosen
carryOverRule = maxConfidence

; Default bounding box sizes (for conversion of point predictions to bounding boxes)
defaultBoxSize_w = 20
defaultBoxSize_h = 20


; File path for a JSON file defining the UI styles. See the "config/styles.json" file for a complete example.
styles_file = config/styles.json



[AIController]
; Type of data to provide to model. One of 'images' (on disk) or 'features' (stored in database)
modelInput = images

; URLs for the job scheduler broker. See documentation:
; https://github.com/microsoft/aerial_wildlife_detection/blob/master/doc/installation_aiTrainer.md
broker_URL = amqp://aide:password@localhost:5672/aide_vhost
result_backend = redis://localhost:6379/0


; Python package path of the model to use. See the built-in model possibilities here:
; https://github.com/microsoft/aerial_wildlife_detection/blob/master/doc/builtin_models.md
; and how to specify a custom model here:
; https://github.com/microsoft/aerial_wildlife_detection/blob/master/doc/custom_model.md
model_lib_path = ai.models.pytorch.boundingBoxes.retinanet.RetinaNet

; Path to the options file of the model to use (file in JSON format)
model_options_path = config/ai/model/detection/retinanet.json

; Python package path of the AL criterion model to use. See the built-in model possibilities here:
; https://github.com/microsoft/aerial_wildlife_detection/blob/master/doc/builtin_models.md
; and how to specify a custom model here:
; https://github.com/microsoft/aerial_wildlife_detection/blob/master/doc/custom_model.md
al_criterion_lib_path = ai.al.builtins.breakingties.BreakingTies

; Options for the AL criterion model (file in JSON format)
al_criterion_options_path = 

; Number of annotated images since last model state date required to auto-start a new
; training process. Set to -1 or remove if automated training is to be disabled.
numImages_autoTrain = 256

; Maximum number of images to train model on at a time (otherwise takes latest annotations)
maxNumImages_train = 4096

; Maximum number of images to do inference at a time
maxNumImages_inference = 4096

; Maximum number of AIWorkers to distribute the training tasks to. Set to -1 or remove to
; always consider all connected workers; set to a number otherwise.
; If set to a number != 1, the routine to average model states will be called upon training
; completion. Defaults to 1.
maxNumWorkers_train = -1

; Maximum number of AIWorkers to distribute the inference tasks to. Set to -1 or remove to
; always consider all connected workers; set to a number otherwise. Defaults to -1 (all workers).
maxNumWorkers_inference = -1




[FileServer]

; File system directory on FileServer instance that hosts all the images to be shown in the interface.
; Images within this base directory may be located in (multiple) sub-directories; their relative path
; from within the staticfiles_dir root must be prepended to the file names in the database, then.
; Use one of the provided image import scripts to take care of this automatically:
; https://github.com/microsoft/aerial_wildlife_detection/blob/master/doc/import_data.md
staticfiles_dir = /home/aide/images

; URL tail snippet under which files can be accessible from other AIde services and user clients (web
; browsers). This is appended to the FileServer's base host URI.
staticfiles_uri = /files



[Database]

; General DB properties
name = ailabeltooldb
schema = aerialtest
host = localhost
port = 17685
user = ailabeluser
password = aiLabelUser

; Maximum number of (concurrent) connections per server instance.
; Under normal circumstances, this does not need to be altered. You may set this to a higher value,
; at the cost of having potentially many TCP connections to the database server open.
; Just make sure to set it high enough for multiple services to be able to access the DB at a time.
max_num_connections = 16
